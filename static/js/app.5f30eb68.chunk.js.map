{"version":3,"sources":["constants/colors.js","components/SetValueContainer.js","components/ShowValuesContainer.js","screens/StartScreen.js","components/ProcessContainer.js","components/ShowColorCode.js","screens/SolverScreen.js","Solver.js","components/Header.js","App.js"],"names":["SetValueContainer","children","style","SafeAreaView","styles","valuesContainer","StyleSheet","create","padding","margin","flex","alignItems","justifyContent","alignSelf","textAlign","backgroundColor","Colors","showValuesContainer","StartScreen","onSolve","useState","processes","setProcesses","quantum","setQuantum","procStart","procDuration","valueSetterContainers","undefined","values","setValues","modalVisible","setModalVisible","useEffect","console","log","screen","View","container","Text","quantumText","TextInput","placeholder","onChangeText","q","modalContainer","Modal","transparent","visible","animationType","modalContent","input","processTitle","processData","processDataVal","procStrt","start","parseInt","procDur","dur","Button","color","title","onPress","push","show","showProcess","showInfo","ShowValuesContainer","buttonContainer","button","borderWidth","borderColor","borderRadius","fontSize","width","height","transform","alignContent","marginTop","fontWeight","marginBottom","valueContainer","marginHorizontal","ProcessContainer","processContainer","flexDirection","ShowColorCode","colorsCont","marginLeft","textAlignVertical","SolverScreen","shower","wait","numProc","starts","durations","ended","restart","procVal","waitTime","content","finalTime","length","forEach","element","result","showVals","i","j","waiting","processing","nothing","processName","processesData","colorCode","showColors","showCode","colorOne","colorText","colorTwo","process","Solver","Process","name","duration","this","processArray","time","pass","line","temporal","shift","pos","indexOf","splice","pop","sort","a","b","Header","header","headerTitle","justifyCOntent","App","appState","setAppState","setContent","setNumProc","setQuamtum","setStarts","setDurations","onSetValues","qProc","quant","state","onRestart"],"mappings":"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","file":"static/js/app.5f30eb68.chunk.js","sourcesContent":["export default {\r\n    primary: '#006d77',\r\n    secondary: '#83c5be',\r\n    tertiary: '#edf6f9',\r\n    quaternary: '#ffddd2',\r\n    quinary: '#e29578'\r\n}","import React from 'react'\r\nimport { StyleSheet, SafeAreaView } from 'react-native'\r\nimport Colors from '../constants/colors';\r\n\r\n\r\nconst SetValueContainer = ({children, style}) => {\r\n    return (\r\n      <SafeAreaView style={[styles.valuesContainer, style]}>\r\n          {children}\r\n      </SafeAreaView>\r\n    )\r\n  }\r\n\r\nexport default SetValueContainer\r\n\r\nconst styles = StyleSheet.create({\r\n  valuesContainer: {\r\n    padding: '100%',\r\n        margin: 10,\r\n        flex:1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        alignSelf: 'center',\r\n        textAlign: 'center',\r\n        backgroundColor: Colors.secondary,\r\n},\r\n});","import React from 'react'\r\nimport { StyleSheet, View, SafeAreaView } from 'react-native'\r\nimport Colors from '../constants/colors';\r\n\r\nconst showValuesContainer = ({children, style}) => {\r\n  return (\r\n    <SafeAreaView style={[styles.valuesContainer, style]}>{children}</SafeAreaView>\r\n  )\r\n}\r\n\r\nexport default showValuesContainer\r\n\r\nconst styles = StyleSheet.create({\r\n    valuesContainer: {\r\n    },\r\n});","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { StyleSheet, View, TextInput, Text, Button, Modal, SafeAreaView } from 'react-native'\r\nimport { TouchableOpacity } from 'react-native-web'\r\nimport SetValueContainer from '../components/SetValueContainer'\r\nimport ShowValuesContainer from '../components/ShowValuesContainer'\r\nimport Colors from '../constants/colors';\r\n\r\nconst StartScreen = ({onSolve}) => {\r\n    const [processes, setProcesses] = useState(0)\r\n    const [quantum, setQuantum] = useState(1)\r\n\r\n    const [procStart, setProcStart] = useState([])\r\n    const [procDuration, setProcDuration] = useState([])\r\n    const [valueSetterContainers, setValueSetterContainers] = useState([])\r\n\r\n    const [values, setValues] = useState(undefined)\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n\r\n    const addProcStart = (idx, start) => {\r\n        procStart[idx] = parseInt(start)\r\n    }\r\n\r\n    const addProcDur = (idx, dur) => {\r\n        procDuration[idx] = parseInt(dur)\r\n    }\r\n\r\n    const addProcess = () => {\r\n        setProcesses(processes+1)\r\n        console.log('processes', processes)\r\n        setModalVisible(false)\r\n        console.log('modalVisible', modalVisible)\r\n\r\n        valueSetterContainers.push(\r\n            <SetValueContainer key={processes} style={styles.show}>\r\n                <Text style={styles.showProcess}>Proceso {processes + 1}</Text>\r\n                <Text style={styles.showInfo}>Tiempo de entrada: {procStart[processes]}</Text>\r\n                <Text style={styles.showInfo}>Duración del proceso: {procDuration[processes]}</Text>\r\n            </SetValueContainer>\r\n        );\r\n\r\n        setValues(<ShowValuesContainer>{valueSetterContainers}</ShowValuesContainer>)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('procStart', procStart)\r\n        console.log('procDuration', procDuration)\r\n    }, [processes])\r\n\r\n    console.log('processes', processes)\r\n    console.log('quantum', quantum)\r\n    \r\n\r\n    return (\r\n    <SafeAreaView style={styles.screen}>\r\n        <View style={styles.container}>\r\n            <Text style={styles.quantumText}>Ingrese el valor del quantum en ticks: </Text>\r\n            <TextInput\r\n                style={styles.quantumText}\r\n                placeholder='Quantum en ticks'\r\n                onChangeText={q => setQuantum(q)}\r\n            />\r\n        </View>\r\n\r\n        {values}\r\n\r\n        <View style={styles.modalContainer}>\r\n            <Modal\r\n                transparent={false}\r\n                visible={modalVisible}\r\n                animationType={'slide'}\r\n            >\r\n                <SafeAreaView style={styles.modalContent}>\r\n                    <SetValueContainer style={styles.input}>\r\n                        <Text style={styles.processTitle}>Proceso {processes + 1}</Text>\r\n                        <Text style={styles.processData}>Tiempo de entrada del proceso</Text>\r\n                        <TextInput\r\n                            style={styles.processDataVal}\r\n                            placeholder='Tiempo de entrada'\r\n                            onChangeText={procStrt => addProcStart(processes, procStrt)}\r\n                        />\r\n                        <Text style={styles.processData}>Duración del proces</Text>\r\n                        <TextInput\r\n                            style={styles.processDataVal}\r\n                            placeholder='Duración del proceso'\r\n                            onChangeText={procDur => addProcDur(processes, procDur)}\r\n                        />\r\n                    </SetValueContainer>\r\n                    <Button\r\n                        color={Colors.quinary}\r\n                        title='Establecer proceso'\r\n                        onPress={() => addProcess()}\r\n                    />\r\n                </SafeAreaView>\r\n            </Modal>\r\n        </View>\r\n        \r\n        <View style={styles.buttonContainer}>\r\n            <Button\r\n                style={styles.button}\r\n                color={Colors.secondary}\r\n                title='Añadir proceso'\r\n                onPress={() => setModalVisible(true)}\r\n            />\r\n        </View>\r\n\r\n        <Button\r\n            color={Colors.quinary}\r\n            title='Resolver'\r\n            onPress={ () => onSolve(processes, quantum, procStart, procDuration, 1) }\r\n        />\r\n\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nexport default StartScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n    },  \r\n    container: {\r\n        margin: 20,\r\n        padding: 10,\r\n        borderWidth: 2,\r\n        backgroundColor: Colors.quaternary,\r\n        borderColor: Colors.quinary,\r\n        borderRadius: 10,\r\n        alignItems: 'center',\r\n    },\r\n    quantumText: {\r\n        fontSize: 17,\r\n        margin: 5,\r\n        textAlign: 'center'\r\n    },\r\n    buttonContainer: {\r\n        margin: 10,\r\n    },\r\n    button:{\r\n        backgroundColor: Colors.secondary,\r\n        borderRadius: 1,\r\n        width: '7%',\r\n        height: '7%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 10,\r\n        borderRadius: 100,\r\n        transform: 'uppercase',\r\n        fontSize: 10,\r\n        color: Colors.tertiary\r\n    },\r\n    input: {\r\n        backgroundColor: Colors.quaternary,\r\n        width: '60%',\r\n        padding: 100,\r\n    },\r\n    show: {\r\n        borderWidth: 2,\r\n        borderColor: Colors.primary,\r\n        borderRadius: 10,\r\n        backgroundColor: Colors.secondary,\r\n    },  \r\n    modalContainer: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n    },\r\n    modalContent: {\r\n        marginTop: '15%',\r\n        width: '30%',\r\n        height: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: 10,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        alignSelf: 'center',\r\n        backgroundColor: Colors.quaternary\r\n    },\r\n    processTitle: {\r\n        fontSize: 25,\r\n        color: Colors.quinary,\r\n        fontWeight: 'bold',\r\n        margin: 5,\r\n    },\r\n    processData: {\r\n        fontSize: 15,\r\n        margin: 5,\r\n    },\r\n    processDataVal: {\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n        marginBottom: 13,\r\n    },\r\n    valueContainer: {\r\n        backgroundColor: 'blue'\r\n    },\r\n    showProcess: {\r\n        fontSize: 20,\r\n        color: Colors.primary,\r\n        fontWeight: 'bold',\r\n        marginHorizontal: 10,\r\n        marginTop: 10,\r\n        marginBottom: 5,\r\n    },\r\n    showInfo: {\r\n        fontSize: 15,\r\n        marginBottom: 10,\r\n        marginHorizontal: 15,\r\n    }\r\n});","import React from 'react'\r\nimport { StyleSheet, View } from 'react-native'\r\nimport Colors from '../constants/colors';\r\n\r\nconst ProcessContainer = ({children}) => {\r\n  return (\r\n    <View style={styles.processContainer}>\r\n        {children}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default ProcessContainer\r\n\r\nconst styles = StyleSheet.create({\r\n    processContainer: {\r\n        padding: 20,\r\n        marginBottom: 5,\r\n        flexDirection: 'row',\r\n        backgroundColor: Colors.secondary,\r\n    },\r\n});","import React from 'react'\r\nimport { StyleSheet, SafeAreaView } from 'react-native'\r\nimport Colors from '../constants/colors';\r\n\r\n\r\nconst ShowColorCode = ({children, style}) => {\r\n    return (\r\n      <SafeAreaView style={[styles.colorsCont, style]}>\r\n          {children}\r\n      </SafeAreaView>\r\n    )\r\n  }\r\n\r\nexport default ShowColorCode;\r\n\r\nconst styles = StyleSheet.create({\r\n  colorsCont: {\r\n    padding: 20,\r\n        marginBottom: 5,\r\n        marginTop:10,\r\n        marginLeft:10,\r\n        flexDirection: 'row',\r\n        backgroundColor: Colors.secondary,\r\n        textAlignVertical:'center',\r\n        textAlign:'center'\r\n},\r\n});","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { StyleSheet, View, TextInput, Text, Button, Modal, SafeAreaView } from 'react-native'\r\n\r\nimport ProcessContainer from '../components/ProcessContainer'\r\nimport Colors from '../constants/colors';\r\nimport SetValueContainer from '../components/SetValueContainer';\r\nimport ShowValuesContainer from '../components/ShowValuesContainer';\r\nimport ShowColorCode from '../components/ShowColorCode';\r\n\r\n\r\nconst SolverScreen = ({numProc, quantum, starts, durations, ended, restart}) => {\r\n\r\n    const [procVal, setProcVal] = useState([])\r\n    const [values, setValues] = useState([])\r\n    const [visible, setVisible] = useState(false)\r\n    const [waitTime, setWaitTime] = useState([])\r\n\r\n    let shower\r\n    let content =[]\r\n    let wait\r\n    let processes = []\r\n    let finalTime = []\r\n    let process = 1;\r\n    let done = false\r\n    let idx = 0\r\n\r\n    console.log('ended.length', ended.length)\r\n    console.log('ended', ended)\r\n\r\n    ended.forEach(element => {\r\n        procVal.push(element.result)\r\n    });\r\n\r\n    console.log('procVal.length', procVal.length)\r\n    console.log('procVal[0].length', procVal[0].length)\r\n\r\n    let showVals = []\r\n\r\n    for(var i = 0; i<procVal.length; i++){\r\n        content = []\r\n        showVals = []\r\n        wait = 0\r\n        for(var j = 0; j<procVal[i].length; j++) {\r\n            if(procVal[i][j] == 0) {\r\n                showVals.push((<Text key={process} style={styles.waiting}>Proceso</Text>))\r\n                wait++\r\n                console.log('waitTime[i]', waitTime[i])\r\n            }\r\n            else if (procVal[i][j] == 1){\r\n                showVals.push((<Text key={process} style={styles.processing}>Proceso</Text>))\r\n            }\r\n            else if(procVal[i][j] == 2) {\r\n                showVals.push((<Text key={process} style={styles.nothing}>Proceso</Text>))\r\n            }\r\n            values.push(procVal[i][j])\r\n        }\r\n\r\n        waitTime[i] = wait\r\n        finalTime[i] = waitTime[i] + durations[i]\r\n        showVals.forEach(element => {\r\n            content.push(element)\r\n        });\r\n        console.log('aki')\r\n\r\n        processes.push(<Text style={styles.processName}>Proceso {i + 1}</Text>)\r\n        processes.push(<ProcessContainer key={i + 10}>{content}</ProcessContainer>)\r\n        \r\n        values.push(3)\r\n    }\r\n    \r\n    console.log('procVal', procVal)\r\n    console.log('values', values)\r\n\r\n    console.log('content', content)\r\n\r\n    let show = []\r\n\r\n    for(var i = 0; i < numProc; i++) {\r\n        show.push(\r\n            <SetValueContainer key={i} style={styles.show}>\r\n                <Text style={styles.showProcess}>Proceso {i + 1}</Text>\r\n                <Text style={styles.showInfo}>Tiempo de entrada: {starts[i]}</Text>\r\n                <Text style={styles.showInfo}>Duración del proceso: {durations[i]}</Text>\r\n                <Text style={styles.showInfo}>Tiempo en espera: {waitTime[i]}</Text>\r\n                <Text style={styles.showInfo}>Tiempo de Finalización: {finalTime[i]}</Text>\r\n            </SetValueContainer>\r\n        );\r\n    }\r\n    \r\n    shower = (<ShowValuesContainer style={styles.processesData}>{show}</ShowValuesContainer>)\r\n\r\n    \r\n\r\n    let showColorCode\r\n\r\n    let colorCode=(<ShowColorCode style={styles.showColors}>\r\n        <Text style={styles.showCode}>Código de color:</Text>\r\n        <View style={styles.colorOne}>\r\n        <Text  style={styles.colorText}> En espera </Text>\r\n        </View>\r\n        <View style={styles.colorTwo}>\r\n        <Text style={styles.colorText}> En ejecución </Text>\r\n        </View>\r\n    </ShowColorCode>)\r\n\r\n    showColorCode=(<ShowColorCode style={styles.showColors}>{colorCode}</ShowColorCode>)\r\n    \r\n\r\n  return (\r\n      <SafeAreaView style={styles.screen}>\r\n          {colorCode}\r\n          {processes}\r\n          \r\n          {shower}\r\n          \r\n            \r\n          <Text style={styles.buttonContainer}>\r\n            <Button\r\n                title='Generar nuevo'\r\n                color={Colors.quinary}\r\n                onPress={() => restart()}\r\n            />\r\n          </Text>\r\n      </SafeAreaView>\r\n      \r\n    )\r\n}\r\n\r\nexport default SolverScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n      flex: 1,\r\n      alignItems: 'flex-start',\r\n    },\r\n    process: {\r\n        backgroundColor: 'red',\r\n        flex: 1,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n    },\r\n    processing: {\r\n        backgroundColor: Colors.quinary,\r\n        color: Colors.quinary,\r\n        flex: 1,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: Colors.primary,\r\n    },\r\n    waiting: {\r\n        backgroundColor: Colors.quaternary,\r\n        color: Colors.quaternary,\r\n        flex: 1,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: Colors.primary,\r\n    },\r\n    nothing: {\r\n        backgroundColor: Colors.secondary,\r\n        color: Colors.secondary,\r\n        flex: 1,\r\n        padding: 10,\r\n    },\r\n    processName: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        margin: 10,\r\n        color: Colors.primary\r\n    },\r\n    buttonContainer: {\r\n        margin: 10,\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        alignSelf: 'center'\r\n    },\r\n    show: {\r\n        borderWidth: 2,\r\n        borderColor: Colors.primary,\r\n        borderRadius: 10,\r\n        backgroundColor: Colors.secondary,\r\n    },  \r\n    showProcess: {\r\n        fontSize: 20,\r\n        color: Colors.primary,\r\n        fontWeight: 'bold',\r\n        marginHorizontal: 10,\r\n        marginTop: 10,\r\n        marginBottom: 5,\r\n    },\r\n    showCode: {\r\n        fontSize: 20,\r\n        color: Colors.primary,\r\n        fontWeight: 'bold',\r\n        marginHorizontal: 10,\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        alignItems:'center',\r\n        justifyContent:'center'\r\n    },\r\n    showInfo: {\r\n        fontSize: 15,\r\n        marginBottom: 10,\r\n        marginHorizontal: 15,\r\n    },\r\n    processesData: {\r\n        flex:1,\r\n        flexDirection: 'row',\r\n        marginTop: 15,\r\n    }, \r\n    showColors:{\r\n        borderWidth: 2,\r\n        borderColor: Colors.primary,\r\n        borderRadius: 10,\r\n        backgroundColor: Colors.secondary,\r\n        alignItems:'center',\r\n        justifyContent:'center'\r\n    },\r\n    colorOne:{\r\n        marginBottom: 10,\r\n        marginTop:10,\r\n        marginHorizontal: 15,\r\n        backgroundColor: Colors.quaternary,\r\n        borderWidth: 2,\r\n        borderColor: Colors.secondary,\r\n        borderRadius: 10,\r\n    },\r\n    colorTwo:{\r\n        marginBottom: 10,\r\n        marginTop: 10,\r\n        marginHorizontal: 15,\r\n        backgroundColor: Colors.quinary,\r\n        borderWidth: 2,\r\n        borderColor: Colors.secondary,\r\n        borderRadius: 10,\r\n    }, colorText:{\r\n        fontSize: 20,\r\n    }\r\n});","import SolverScreen from \"./screens/SolverScreen\";\r\n\r\nconst Solver = ({numProc, quantum, starts, durations, restart}) => {\r\n\r\n\r\nclass Process {\r\n    constructor(name, duration, starts) {\r\n        this.name = name;\r\n        this.duration = duration;\r\n        this.starts = starts;\r\n        this.result=[];\r\n    }\r\n}\r\n\r\n//0 = Wait\r\n//1 = Being processed\r\n//2 = N/A\r\n\r\nconst processArray=[];\r\n\r\nfor(var i=0;i<numProc;i++){\r\n    processArray.push(new Process(i, durations[i], starts[i]));\r\n}\r\n\r\nconsole.log('processArray', processArray)\r\n\r\nlet time=0;\r\n\r\n//Tick per quantum\r\nlet pass=0;\r\n\r\n//Processes in the waiting line\r\nconst line=[];\r\n\r\n//Ended processes\r\nconst ended=[];\r\n\r\n//This occurs every tick\r\ndo{\r\n    console.log(\"Current time: \", time);\r\n\r\n    //If a process has been executed for a quantum and there are elements in the waiting line\r\n    if ((pass==quantum) && (line.length>0)){\r\n        let temporal=line[0];\r\n        line.shift();\r\n        line.push(temporal);\r\n        console.log(\"Element \",line[line.length-1].name, \" moved to back of the line\");\r\n        pass=0;\r\n    }\r\n\r\n    if(processArray.length>0){\r\n        processArray.forEach(element => {\r\n            if(element.starts==time){\r\n                line.push(element);\r\n    \r\n                let pos=processArray.indexOf(element);\r\n                processArray.splice(pos, 1);\r\n\r\n                console.log(\"Element \",line[line.length-1].name, \" added to the line\");\r\n            }else{\r\n            }\r\n        });\r\n    }\r\n    console.log(\"Salgo\");\r\n\r\n    //If there are processes in the waiting line\r\n    if(line.length>0){\r\n        line[0].duration--;\r\n        line[0].result.push(1);\r\n        pass++;\r\n        \r\n        //Add waiting tick for each waiting process\r\n        line.forEach(element => {\r\n            element.result.push(0);\r\n        });\r\n        line[0].result.pop();\r\n\r\n        //If process[0] is done\r\n        if(line[0].duration==0){\r\n            ended.push(line[0]);\r\n            //Delete from the array the element[0]\r\n            line.shift();\r\n            pass=0;\r\n        }\r\n\r\n        if(processArray.length>0){\r\n            processArray.forEach(element => {\r\n                if (element.starts>time){\r\n                    //It hasn't started\r\n                    element.result.push(2);\r\n                }\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    time++;\r\n\r\n}while(ended.length<numProc);\r\n\r\nended.sort((a, b) => {\r\n    return a.name - b.name;\r\n});\r\n\r\n\r\nended.forEach(element => {\r\n    console.log(element.name, element.result);\r\n});\r\n\r\nreturn (\r\n    <SolverScreen numProc={numProc} quantum={quantum} starts={starts} durations={durations} ended={ended} restart={restart}/>\r\n)\r\n}\r\n\r\nexport default Solver;","import React from 'react'\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport Colors from '../constants/colors';\r\n\r\nconst Header = ({title}) => {\r\n    return (\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>{title}</Text>\r\n      </View>\r\n    );\r\n  }\r\nexport default Header\r\n\r\nconst styles = StyleSheet.create({\r\n    header: {\r\n      width: '100%',\r\n      padding: 30,\r\n      backgroundColor: Colors.secondary,\r\n      alignItems: 'center',\r\n      justifyCOntent: 'center'\r\n    },\r\n    headerTitle: {\r\n      color: Colors.primary,\r\n      fontSize: 40\r\n    }\r\n  });\r\n  ","import { useState, useEffect } from 'react'\r\nimport { StyleSheet, Text, View, TextInput, SafeAreaView } from 'react-native';\r\nimport StartScreen from './screens/StartScreen';\r\nimport SolverScreen from './screens/SolverScreen';\r\nimport Solver from './Solver';\r\nimport Header from './components/Header';\r\nimport Colors from './constants/colors';\r\n\r\nexport default function App() {\r\n\r\n  const [appState, setAppState] = useState(0);\r\n  const [content, setContent] = useState(<StartScreen onSolve={setAppState}/>)\r\n  const [numProc, setNumProc] = useState(undefined)\r\n  const [quantum, setQuamtum] = useState(undefined)\r\n  const [starts, setStarts] = useState([])\r\n  const [durations, setDurations] = useState([])\r\n\r\n  const onSetValues = (qProc, quant, starts, durations, state) => {\r\n    setNumProc(qProc)\r\n    setQuamtum(quant)\r\n    setStarts(starts)\r\n    setDurations(durations)\r\n    setAppState(state)\r\n  }\r\n\r\n  const onRestart = () => {\r\n    setNumProc(undefined)\r\n    setQuamtum(undefined)\r\n    setStarts([])\r\n    setDurations([])\r\n    setAppState(0)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(appState === 0){\r\n      setContent(<StartScreen onSolve={onSetValues}/>)\r\n    }\r\n    else if (appState === 1){\r\n      setContent(<Solver numProc={numProc} quantum={quantum} starts={starts} durations={durations} restart={onRestart} />)\r\n    }\r\n  }, [appState])\r\n  \r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <Header title={'Solver de Round Robin'}/>\r\n      {content}\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: Colors.tertiary\r\n  },\r\n});\r\n"],"sourceRoot":""}